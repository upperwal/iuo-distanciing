{"version":3,"sources":["components/TMap/scene.yaml","components/TMap/labels.yaml","components/ZoneMap.jsx","components/TMap/TMap.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","ZoneMap","TMap","mapRef","useRef","useState","valState","setValState","useLayoutEffect","GeoJSON","el","document","getElementById","layer","Tangram","leafletLayer","scene","events","hover","selection","undefined","feature","style","top","pixel","y","left","x","cl","v","pct","Math","log","percentColors","color","r","g","b","i","length","lower","upper","range","rangePct","pctLower","pctUpper","floor","join","getColor","properties","POP_ROW","borderColor","visibility","NOTE","attribution","maxZoom","c","config","console","addTo","current","leafletElement","Map","center","zoom","ref","className","id","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"83lsSAAAA,EAAOC,QAAU,IAA0B,oC,2/u8HCA3CD,EAAOC,QAAU,IAA0B,qC,mLCyK5BC,I,sDClEAC,MA3Ff,WACI,IAAMC,EAASC,iBAAO,MADV,EAEoBC,mBAAS,cAF7B,mBAELC,EAFK,KAEKC,EAFL,KAiFZ,OAjDAC,2BAAgB,WACHC,EAAA,EAAT,IAIIC,EAAKC,SAASC,eAAe,SAE3BC,EAAQC,IAAQC,aAAa,CAC/BC,MAAOA,IACPC,OAAQ,CACJC,MAAO,SAASC,GAGZ,QAAyBC,IAAtBD,EAAUE,QAAuB,CAGhCX,EAAGY,MAAMC,IAAMJ,EAAUK,MAAMC,EAAI,GAAK,KACxCf,EAAGY,MAAMI,KAAOP,EAAUK,MAAMG,EAAI,GAAK,KAEzC,IAAIC,EA/CxB,SAAkBC,GAQd,IAPA,IAAIC,EAAM,EAAMC,KAAKC,IAAIH,GAAK,IAE1BI,EAAgB,CAChB,CAAEH,IAAK,EAAKI,MAAO,CAAEC,EAAG,IAAMC,EAAG,EAAMC,EAAG,IAC1C,CAAEP,IAAK,IAAMI,MAAO,CAAEC,EAAG,IAAMC,EAAG,IAAMC,EAAG,IAC3C,CAAEP,IAAK,EAAKI,MAAO,CAAEC,EAAG,EAAMC,EAAG,IAAMC,EAAG,KAErCC,EAAI,EAAGA,EAAIL,EAAcM,OAAS,KACnCT,EAAMG,EAAcK,GAAGR,KADeQ,KAK9C,IAAIE,EAAQP,EAAcK,EAAI,GAC1BG,EAAQR,EAAcK,GACtBI,EAAQD,EAAMX,IAAMU,EAAMV,IAC1Ba,GAAYb,EAAMU,EAAMV,KAAOY,EAC/BE,EAAW,EAAID,EACfE,EAAWF,EACXT,EAAQ,CACRC,EAAGJ,KAAKe,MAAMN,EAAMN,MAAMC,EAAIS,EAAWH,EAAMP,MAAMC,EAAIU,GACzDT,EAAGL,KAAKe,MAAMN,EAAMN,MAAME,EAAIQ,EAAWH,EAAMP,MAAME,EAAIS,GACzDR,EAAGN,KAAKe,MAAMN,EAAMN,MAAMG,EAAIO,EAAWH,EAAMP,MAAMG,EAAIQ,IAE7D,MAAO,OAAS,CAACX,EAAMC,EAAGD,EAAME,EAAGF,EAAMG,GAAGU,KAAK,KAAO,IAuB/BC,CAAS7B,EAAUE,QAAQ4B,WAAWC,SAC/CxC,EAAGY,MAAMY,MAAQN,EACjBlB,EAAGY,MAAM6B,YAAcvB,EACvBlB,EAAGY,MAAM8B,WAAa,UAEtB7C,EAAYY,EAAUE,QAAQ4B,WAAWI,SAKrDC,YAAa,kKACbC,QAAS,KAQTC,EAAI3C,EAAMG,MAAMyC,OACpBC,QAAQ1B,IAAIwB,GAGZE,QAAQ1B,IAAInB,GAEZA,EAAM8C,MAAMxD,EAAOyD,QAAQC,kBAG5B,IAGC,oCACI,kBAACC,EAAA,EAAD,CAAKC,OAAQ,CAAC,UAAW,WAAYC,KAAM,GAAIC,IAAK9D,IACpD,yBAAK+D,UAAU,QAAQC,GAAG,SACrB7D,K,MClFF8D,MARf,WACC,OACC,yBAAKF,UAAU,OACd,kBAAC,EAAD,QCEiBG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFjE,SAASC,eAAe,SDyHpB,kBAAmBiE,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1B,QAAQ0B,MAAMA,EAAMC,c","file":"static/js/main.d0d7a1bb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/scene.78eddd36.yaml\";","module.exports = __webpack_public_path__ + \"static/media/labels.d6bc8251.yaml\";","import React, { useState, useEffect } from 'react'\nimport { Map, TileLayer, Polygon, Circle, GeoJSON } from 'react-leaflet'\n\nimport 'leaflet/dist/leaflet.css'\nimport './ZoneMap.scss'\n\nimport HaryanaZones from './28_May_2020.json'\nimport HaryanaCases from './30_May_2020_21_07.json'\nimport CZones from './czones.json'\nimport IndiaGeoJSON from './india.json'\n\nfunction ZoneMap(props) {\n\n    const [polygonData, setPolygonData] = useState([])\n    const [individualCasesData, setIndividualCasesData] = useState([])\n\n    function fetchData() {\n        fetch('https://api.data.gov.in/resource/ee35f072-4d80-4b41-8c17-fd74414907be?api-key=579b464db66ec23bdd000001a12792885ab14a706ae7f41988a7204a&format=json&offset=0&limit=1000')\n            .then(response => response.json())\n            .then(response => {\n                let arr = []\n                response.records.forEach(d => {\n                    arr.push(parseToJSON(d.coordinates))\n                })\n                \n                setPolygonData(arr)\n                console.log(arr)\n            })\n        \n        fetch('https://api.data.gov.in/resource/b9cfed4c-a1a2-4f7a-affa-88a8e1a2149c?api-key=579b464db66ec23bdd000001a12792885ab14a706ae7f41988a7204a&format=json&offset=0&limit=1500')\n            .then(response => response.json())\n            .then(response => {\n                setIndividualCasesData(response.records)\n            })\n    }\n\n    useEffect(fetchData, []);\n\n    function parseToJSON(str) {\n        let m = str.match(/\\(\\(([\\d .,]*)\\)\\)/)\n        console.log(('[' + m[1] + ']').replace(/(\\s\\s)|(\\s,\\s)/g, ','))\n        let a = JSON.parse(('[' + m[1] + ']').replace(/(\\s\\s)|(\\s,\\s)/g, ','))\n\n        let res = []\n        for(let i = 0; i < a.length; i=i+2) {\n            res.push([a[i+1], a[i]])\n        }\n        return res\n    }\n\n    function mapIndividualCases(data) {\n        let view = []\n        console.log(data.length)\n        data.forEach((d, idx) => {\n            let color = \"#5800ab\"\n            switch(d.result) {\n                case 'Death':\n                    color = '#be2b16'\n                    break\n                case 'Cured/Discharged':\n                    color = '#000000'\n            }\n            view.push(\n                <Circle \n                    key={idx} \n                    center={[d.latitude, d.longitude]} \n                    fillColor={color}\n                    fillOpacity={0.4}\n                    weight={0}\n                    radius={50}\n                >\n                </Circle>)\n        })\n        return view\n    }\n\n    function mapPointsThroughGeoJSON(data) {\n        let view = []\n        console.log(data.features.length)\n        data.features.forEach((d, idx) => {\n            if(d.geometry.coordinates.length != 2) {\n                return\n            }\n            let color = \"red\"\n            switch(d.result) {\n                case 'Death':\n                    color = '#be2b16'\n                    break\n                case 'Cured/Discharged':\n                    color = '#000000'\n            }\n            view.push(\n                <Circle \n                    key={idx} \n                    center={[d.geometry.coordinates[1], d.geometry.coordinates[0]]} \n                    fillColor={color}\n                    fillOpacity={0.4}\n                    weight={0}\n                    radius={70}\n                >\n                </Circle>)\n        })\n        return view\n    }\n\n    function fe(feature, layer) {\n    }\n\n    function st(fe) {\n        return{\n\n        }\n    }\n\n    return (\n        <div className=\"ZoneMap\">\n            <Map\n                center = {[28.4264366,76.3229614]}\n                zoom = {8}\n                zoomSnap={.5}\n                zoomDelta={.4}\n                zoomAnimationThreshold={8}\n            >\n                {/* <GeoJSON\n                    data={IndiaGeoJSON}\n                    color=\"#000\"\n                    fillColor=\"#00000000\"\n                    opacity={1}\n                    weight={.5}\n                    fillOpacity={0}\n                >\n                </GeoJSON> */}\n                <TileLayer\n                    attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                    url=\"https://api.mapbox.com/styles/v1/upperwal/ckascohod02ax1iqv4j2cdjmd/tiles/{z}/{x}/{y}?access_token=pk.eyJ1IjoidXBwZXJ3YWwiLCJhIjoiY2lxNmVvcGo4MDA3MGZ2bTY1b255OW14dSJ9.h18VG_xCO7yQXMajIqKyHg\"\n                >\n                </TileLayer>\n                {/* <Polygon\n                    color=\"#62002b\"\n                    positions={polygonData}\n                    opacity={1}\n                    weight={1.5}\n                    fillOpacity={0.3}\n                >\n                </Polygon> */}\n                {/* mapIndividualCases(individualCasesData) */}\n                <GeoJSON\n                    data={HaryanaZones}\n                    color=\"#62002b\"\n                    positions={polygonData}\n                    opacity={1}\n                    weight={1.5}\n                    fillOpacity={0.3}\n                >\n                </GeoJSON>\n                {/* mapPointsThroughGeoJSON(HaryanaCases) */}\n                <GeoJSON\n                    data={CZones}\n                    color=\"#62002b\"\n                    opacity={1}\n                    weight={1.5}\n                    fillOpacity={0.3}\n                >\n                </GeoJSON>\n            </Map>\n        </div>\n    )\n}\n\nexport default ZoneMap\n","import React, { useRef, useLayoutEffect, useState } from 'react'\nimport { Map, GeoJSON } from 'react-leaflet';\nimport L from 'leaflet'\nimport Tangram from 'tangram'\n\nimport './TMap.scss'\n\nimport scene from './scene.yaml'\nimport labels from './labels.yaml'\n\nimport pune_sd from './pune_processed.json'\n\nfunction TMap() {\n    const mapRef = useRef(null);\n    const [valState, setValState] = useState('Some Value')\n\n    function getColor(v) {\n        var pct = 1.0 - Math.log(v) / 8.8;\n        \n        var percentColors = [\n            { pct: 0.0, color: { r: 0xff, g: 0x00, b: 0 } },\n            { pct: 0.35, color: { r: 0xff, g: 0xff, b: 0 } },\n            { pct: 1.0, color: { r: 0x00, g: 0xff, b: 0 } } ];\n\n        for (var i = 1; i < percentColors.length - 1; i++) {\n            if (pct < percentColors[i].pct) {\n                break;\n            }\n        }\n        var lower = percentColors[i - 1];\n        var upper = percentColors[i];\n        var range = upper.pct - lower.pct;\n        var rangePct = (pct - lower.pct) / range;\n        var pctLower = 1 - rangePct;\n        var pctUpper = rangePct;\n        var color = {\n            r: Math.floor(lower.color.r * pctLower + upper.color.r * pctUpper),\n            g: Math.floor(lower.color.g * pctLower + upper.color.g * pctUpper),\n            b: Math.floor(lower.color.b * pctLower + upper.color.b * pctUpper)\n        };\n        return 'rgb(' + [color.r, color.g, color.b].join(',') + ')';\n\n    }\n\n    useLayoutEffect(() => {\n        let o = <GeoJSON data={pune_sd} />\n        //window.chroma = chroma\n        /* let scale = chroma.scale(['lightyellow', 'navy']).domain([1, 100000], 7, 'log')\n        console.log(scale(1).hex(), scale(500).hex(), scale(10000).hex(), scale(100000).hex()) */\n        let el = document.getElementById('popup')\n\n        const layer = Tangram.leafletLayer({\n            scene: scene,\n            events: {\n                hover: function(selection) { \n\n                    //console.log('Hover!', selection); \n                    if(selection.feature !== undefined) {\n                        //console.log(selection.feature)\n                        \n                        el.style.top = selection.pixel.y + 10 + 'px'\n                        el.style.left = selection.pixel.x + 10 + 'px'\n\n                        let cl = getColor(selection.feature.properties.POP_ROW)\n                        el.style.color = cl\n                        el.style.borderColor = cl\n                        el.style.visibility = 'visible'\n                        //console.log(el)\n                        setValState(selection.feature.properties.NOTE)\n                    } else {\n                    }\n                }\n            },\n            attribution: 'Map data &copy; <a href=\"https://www.openstreetmap.org/\">OpenStreetMap</a> contributors, <a href=\"https://creativecommons.org/licenses/by-sa/2.0/\">CC-BY-SA</a>',\n            maxZoom: 16\n        });\n\n        /* layer.scene.config.global = {\n            hi: 'hello'\n        } */\n        /* console.log(layer.scene.config)*/\n        \n        let c = layer.scene.config\n        console.log(c)\n        //layer.scene.updateConfig()\n        \n        console.log(layer)\n\n        layer.addTo(mapRef.current.leafletElement);\n        //let m = L.geoJSON().addTo(mapRef.current.leafletElement)\n        //m.addData(pune_sd)\n    }, [])\n\n    return (\n        <>\n            <Map center={[18.528869, 73.852482]} zoom={15} ref={mapRef} />\n            <div className=\"popup\" id=\"popup\">\n                {valState}\n            </div>\n        </>\n    )\n}\n\nexport default TMap;\n","import React from 'react';\n\nimport ZoneMap from './components/ZoneMap'\nimport TMap from './components/TMap/TMap'\n\nimport './App.scss';\n\nfunction App() {\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<TMap/>\n\t\t</div>\n  \t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}